" Install plug.vim automatically
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
      silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Plugins
call plug#begin('~/.vim/plugged')
	Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
	Plug 'morhetz/gruvbox' 	" gruvbox colorscheme
	Plug 'vim-scripts/AutoComplPop' 	" auto completion
	Plug 'christoomey/vim-tmux-navigator' 	" vim tmux navigator
	Plug 'justinmk/vim-sneak' 	" vim sneak
	Plug 'unblevable/quick-scope' " quick scope
	Plug 'raimondi/delimitmate' " auto closing brackets/quotes/...
	Plug 'vim-syntastic/syntastic' " syntax checkings
	Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
	Plug 'tpope/vim-commentary'
	Plug 'ctrlpvim/ctrlp.vim'
call plug#end()

" start from where you left before
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" set $RC to access vimrc file within vim
	let $RC="$HOME/.vim/vimrc"

" color column indicating max char in a line for c files
	autocmd BufNewFile,BufRead *.c set colorcolumn=80
	autocmd BufNewFile,BufRead *.h set colorcolumn=80
	autocmd BufNewFile,BufRead *.rst set colorcolumn=80

" set line number and relative line numbers
	set number relativenumber

" No statusbar
	set laststatus=0

" system clipboard
	set clipboard=unnamed

" Search for tags file
	set tags=tags;/
" show trailing white spaces and tabs
	set listchars=tab:_\ ,trail:_
	" show/hide trailing spaces and tabs
	function! ListToggle()
		:set list!
	endfunction
	nnoremap tl :call ListToggle()<CR>

" Enable auto-completion
	set wildmenu
	set wildmode=longest,list,full

" syntax coloring 
	syntax on
	set background=dark
	colorscheme gruvbox

" set tabstop to 4 and shiftwidth to 4
	set tabstop=4 shiftwidth=4

" indentation
	set autoindent smartindent cindent

" Search settings
	set incsearch
	set ignorecase

" no text wrap
	set nowrap

" mouse enable
	" set mouse=a

" show command at the bottom right of the screen
	set showcmd

" split panes to right and below
	set splitright splitbelow

" Windows navigation
	nnoremap <C-j> <C-w>j
	nnoremap <C-k> <C-w>k
	nnoremap <C-l> <C-w>l
	nnoremap <C-h> <C-w>h
	nnoremap <C-f> <C-w>F<C-w>L

" terminal in vertical mode
	command! Vterm :vert term 

" Extras
	inoremap jj <ESC>
	inoremap JJ <ESC>
	nnoremap ; :

" Generate tags file from within vim 
	function! MakeTags()
		:!ctags -R . && echo "tags generated"
	endfunction

	nnoremap mt :call MakeTags()<CR>

" Presentation mode
	function SetvimPresentation()
		set nonu
		set nornu
		nnoremap <buffer> <Right> :n<CR>
		nnoremap <buffer> <Left> :N<CR>
		nnoremap <buffer> <space>l :n<CR>
		nnoremap <buffer> <space>h :N<CR>
	endfunction

"	autocmd BufNewFile,BufRead *.md call SetvimPresentation()
	nnoremap <F5> :call SetvimPresentation()<CR>

" tmux navigator
	let g:tmux_navigator_no_mappings = 1

	nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
	nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
	nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
	nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
	nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

" arrow keys to resize panes in normal mode
	nnoremap <left> <Esc><C-w><<Insert>
	nnoremap <right> <Esc><C-w>><Insert>
	nnoremap <up> <Esc><C-w>+<Insert>
	nnoremap <down> <Esc><C-w>-<Insert>

" you better use the vim keys
	inoremap <left> <nop>
	inoremap <right> <nop>
	inoremap <up> <nop>
	inoremap <down> <nop>

" move by line on screen
	nnoremap j gj
	nnoremap k gk

" move faster
	nnoremap <S-k> 5k
	nnoremap <S-j> 5j


" quickscope
	augroup qs_colors
		autocmd!
		autocmd ColorScheme * highlight QuickScopePrimary guifg='#afff5f' gui=underline ctermfg=155 cterm=underline
		autocmd ColorScheme * highlight QuickScopeSecondary guifg='#5fffff' gui=underline ctermfg=81 cterm=underline
	augroup END

" include dir for header files
let g:syntastic_c_include_dirs = ['../hdr/', './hdr/']

" transparent background
	hi Normal guibg=NONE ctermbg=NONE

" hex code colors
	set termguicolors
	let g:Hexokinase_highlighters = ['backgroundfull']

" highlight current line
	set cursorline
